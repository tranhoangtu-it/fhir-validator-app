{"resourceType":"CodeSystem","id":"obligation","text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Properties</b></p><p><b>This code system  defines the following properties for its concepts</b></p><table class=\"grid\"><tr><td><b>Code</b></td><td><b>Type</b></td><td><b>Description</b></td></tr><tr><td>should-shall</td><td>boolean</td><td>Codes with this property true must have shall or should appended in the grammar</td></tr><tr><td>expression</td><td>string</td><td>Expression that expresses aggregate codes using the grammar</td></tr></table><p><b>Concepts</b></p><p>This code system <code>http://hl7.org/fhir/tools/CodeSystem/obligation</code> defines the following codes:</p><table class=\"codes\"><tr><td><b>Lvl</b></td><td style=\"white-space:nowrap\"><b>Code</b></td><td><b>Display</b></td><td><b>Definition</b></td><td><b>should-shall</b></td><td><b>expression</b></td></tr><tr><td>1</td><td style=\"white-space:nowrap\">ResourceProducerObligations<a name=\"obligation-ResourceProducerObligations\"> </a></td><td>ResourceProducerObligations</td><td>Resource producers are applications that assembles resources in the first place. Resource producers may be a server, client, sender, receiver or some middleware device, and they may store the resource, or merely hand it on.</td><td/><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0can-send<a name=\"obligation-can-send\"> </a></td><td>Conformant Applications SHALL/SHOULD be able to correctly populate this element</td><td>Notes: Typically, this means that an application needs to demonstrate during some conformance testing process that there are some conditions under which it populates the element with a correct value</td><td>true</td><td/></tr><tr><td>3</td><td style=\"white-space:nowrap\">\u00a0\u00a0\u00a0\u00a0will-send<a name=\"obligation-will-send\"> </a></td><td>Conformant Applications SHALL/SHOULD send this element if a value is known, and allowed to be shared</td><td>Notes: This implementation obligation means that whenever the producer knows the correct value for an element, it populates it, subject to security and privacy considerations</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0use-reason<a name=\"obligation-use-reason\"> </a></td><td>Conformant Applications SHALL/SHOULD provide an element with a DataAbsentReason or a NullFlavor if a value is not known and the element is mandatory</td><td>Notes: When no value for an element is known, the producer populates the element with a DataAbsentReason or a NullFlavor. If no particular reason is known or reportable, the DataAbsentReason 'unknown' is used. Which particular extension can be used, see below</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0will-present<a name=\"obligation-will-present\"> </a></td><td>Conformant Applications SHALL/SHOULD ensure that this data element is represented in any human readable representation in a resource</td><td>Notes: When no value for an element is known, the producer populates the element with a DataAbsentReason or a NullFlavor. If no particular reason is known or reportable, the DataAbsentReason 'unknown' is used. Which particular extension can be used, see below</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0in-ui<a name=\"obligation-in-ui\"> </a></td><td>Conformant Applications SHALL/SHOULD ensure that users can enter a value for this element during data input</td><td>Notes: Exactly what form the input takes is not specified, but the expectation is that this is a value that comes from the user, and not implied internally by the application</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0may-populate<a name=\"obligation-may-populate\"> </a></td><td>A Conformant Application MAY choose not to populate this element</td><td>Notes: this is the converse of will-send, and is really a null-statement - it's the default rule for an application. It's defined here to allow a specification to be explicit that it isn't conveying obligations for resource producers</td><td/><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0must-explain<a name=\"obligation-must-explain\"> </a></td><td>Documentation applicable to Conformant Applications SHALL/SHOULD explain how this element is handled</td><td>Notes: this is really a rule about specifications, implying that another specification (which might be application documentation) either makes this element will-send, or explains how the use cases that involve this element do not arise, or how they are handled. An example: IPA marks Patient.active must-handle and must-explain. Client applications must process Patient.active correctly if they see it, but many (though *not all*) specifications and/or applications ensure that Patient.active will never be false, and so it will never be populated e.g. MedMij in Netherlands prohibits use of Patient.active, and explains that it is never false.</td><td>true</td><td/></tr><tr><td>1</td><td style=\"white-space:nowrap\">ExchangerObligations<a name=\"obligation-ExchangerObligations\"> </a></td><td>ExchangerObligations</td><td>Exchangers do not produce or consume resources; they only pass the resource on. They may store the resource in a persistent store between reception and subsequent transfer. The generic FHIR servers are exchangers, as are most middleware systems.</td><td/><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0preserve<a name=\"obligation-preserve\"> </a></td><td>Conformant Applications SHALL/SHOULD ensure that this element does not changed between receiving and transfer</td><td>Notes: This does not mean that the element value cannot change, only that changing the element value for an element marked with this obligation moves an application from being an exchanger to a Consumer and a Producer, and those obligations apply</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0may-alter<a name=\"obligation-may-alter\"> </a></td><td>Conformant Applications MAY choose not to alter this element value</td><td>Notes: this is the converse of preserve, and is really a null-statement - it's the default rule for an application. It's defined here to allow a specification to be explicit that it isn't conveying obligations for resource producers</td><td/><td/></tr><tr><td>1</td><td style=\"white-space:nowrap\">ResourceConsumerObligations<a name=\"obligation-ResourceConsumerObligations\"> </a></td><td>ResourceConsumerObligations</td><td>Resource Consumers are applications that consume resources and do something with them, either displaying them to humans, transferring them to some other format for further re-use, or using them to drive some kind of application logic process AKA decision support. Resource Consumers often store resources, but do not need to, and whether resources are stored or not between receiving them and using them doesn't make any difference to the obligations</td><td/><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0no-error<a name=\"obligation-no-error\"> </a></td><td>Conformant Applications SHALL/SHOULD accept resources containing any valid value for the element without error</td><td>Notes: Applications are still able to inform the user that a value cannot be processed correctly, but applications aren't able to reject the information out of hand or ignore the element value in order to process the resource correctly (which would be allowed for elements that do not have this obligation). This obligation also applies to elements that only contain a DataAbsentReason or a NullFlavor, should either of these be allowed on the consumer obligations</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0must-handle<a name=\"obligation-must-handle\"> </a></td><td>Conformant Applications SHALL/SHOULD handle the meaning of this element correctly</td><td>Notes: this rule is vague in that doesn't specify any particular handling of the element. But it's important because an application that ignores this element is non-conformant. A good example would be a status code of 'entered-in-error' - how exactly a Resource Consumer handles this depends on the use case etc, but the application can never simply ignore such a status code. Note that whether the resource or information from it is stored for later use is irrelevant - when the resource or information in it is processed, the consequences of the element are considered. That may mean not retaining the information for later use, or informing the user, etc. Typically, this obligation marks that there are known patient safety issues that can arise if the element is ignored. Implementers should pay particular attention to the possible range of values for the element from a safety perspective.</td><td>true</td><td/></tr><tr><td>3</td><td style=\"white-space:nowrap\">\u00a0\u00a0\u00a0\u00a0must-display<a name=\"obligation-must-display\"> </a></td><td>Conformant Applications SHALL/SHOULD display the value of this element when presenting the resource to a human user</td><td>Notes: exactly how it is displayed is not specified, but it means that a human looking at the content of the resource is made aware of the value of the element so that they can consider the meaning of the resource</td><td>true</td><td/></tr><tr><td>3</td><td style=\"white-space:nowrap\">\u00a0\u00a0\u00a0\u00a0must-share<a name=\"obligation-must-share\"> </a></td><td>Conformant Applications SHALL/SHOULD retain the value of this element when the information from the resource is shared with other applications</td><td>Notes: this rule applies whether the information is being shared in the form of a FHIR resource, or in some other format. The rule applies whether or not the resource is stored prior to sharing.</td><td>true</td><td/></tr><tr><td>3</td><td style=\"white-space:nowrap\">\u00a0\u00a0\u00a0\u00a0must-process<a name=\"obligation-must-process\"> </a></td><td>Conformant Applications SHALL/SHOULD consider the value of this element when processing the resource as specified by the IG</td><td>Notes: this implies that the IG that specifies this obligation provides details about what processing is to be performed, and the obligation specifially relates to the processing specified in the IG DataAbsentReason or NullFlavor when handling the resource or the information in it as specified by the other obligations.</td><td>true</td><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0can-ignore<a name=\"obligation-can-ignore\"> </a></td><td>A Conformant Application MAY ignore this element</td><td>Notes: this is the converse of must-handle, and is really a null-statement - it's the default rue for an application. It's defined here to allow a specification to be explicit that it isn't converying obligations for resource consumers</td><td/><td/></tr><tr><td>1</td><td style=\"white-space:nowrap\">AggregateConcepts<a name=\"obligation-AggregateConcepts\"> </a></td><td>AggregateConcepts</td><td>Predefined common combinations</td><td/><td/></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0v2-re<a name=\"obligation-v2-re\"> </a></td><td>V2 RE</td><td>RE as defined in chapter 2 of the v2 specification</td><td/><td>can-send/SHALL+use-dar-nf/SHALL+must-handle/SHALL+must-display/SHALL+must-share/SHOULD+no-error/SHALL+assume-unknown/SHALL</td></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0ihe-r2<a name=\"obligation-ihe-r2\"> </a></td><td>IHE R2</td><td>R2 as defined in IHE Appendix Z</td><td/><td>will-send/SHALL+can-ignore+no-error/SHALL</td></tr><tr><td>2</td><td style=\"white-space:nowrap\">\u00a0\u00a0std<a name=\"obligation-std\"> </a></td><td>Standard Obligations</td><td>The standard recommended set of obligations for IGs to use unless they know they want something different. Note that the standard codes don't include use-dar, use-dar-nf, use-dar-if-allowed / use-reason - that gets put on specific elements that justify this handling</td><td/><td>will-send/SHALL+will-present/SHALL+no-error/SHALL+must-handle/SHOULD</td></tr></table></div>"},"url":"http://hl7.org/fhir/tools/CodeSystem/obligation","version":"0.1.0","name":"ObligationCodes","title":"Obligation Codes","status":"active","experimental":true,"date":"2023-07-05T09:33:10+00:00","publisher":"HL7 International / FHIR Infrastructure","contact":[{"telecom":[{"system":"url","value":"http://hl7.org/Special/committees/fhir-i"}]}],"description":"Codes that describe application Obligations","jurisdiction":[{"coding":[{"system":"http://unstats.un.org/unsd/methods/m49/m49.htm","code":"001"}]}],"caseSensitive":true,"hierarchyMeaning":"is-a","content":"complete","property":[{"code":"should-shall","description":"Codes with this property true must have shall or should appended in the grammar","type":"boolean"},{"code":"expression","description":"Expression that expresses aggregate codes using the grammar","type":"string"}],"concept":[{"code":"ResourceProducerObligations","display":"ResourceProducerObligations","definition":"Resource producers are applications that assembles resources in the first place. Resource producers may be a server, client, sender, receiver or some middleware device, and they may store the resource, or merely hand it on.","concept":[{"code":"can-send","display":"Conformant Applications SHALL/SHOULD be able to correctly populate this element","definition":"Notes: Typically, this means that an application needs to demonstrate during some conformance testing process that there are some conditions under which it populates the element with a correct value","property":[{"code":"should-shall","valueBoolean":true}],"concept":[{"code":"will-send","display":"Conformant Applications SHALL/SHOULD send this element if a value is known, and allowed to be shared","definition":"Notes: This implementation obligation means that whenever the producer knows the correct value for an element, it populates it, subject to security and privacy considerations","property":[{"code":"should-shall","valueBoolean":true}]}]},{"code":"use-reason","display":"Conformant Applications SHALL/SHOULD provide an element with a DataAbsentReason or a NullFlavor if a value is not known and the element is mandatory","definition":"Notes: When no value for an element is known, the producer populates the element with a DataAbsentReason or a NullFlavor. If no particular reason is known or reportable, the DataAbsentReason 'unknown' is used. Which particular extension can be used, see below","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"will-present","display":"Conformant Applications SHALL/SHOULD ensure that this data element is represented in any human readable representation in a resource","definition":"Notes: When no value for an element is known, the producer populates the element with a DataAbsentReason or a NullFlavor. If no particular reason is known or reportable, the DataAbsentReason 'unknown' is used. Which particular extension can be used, see below","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"in-ui","display":"Conformant Applications SHALL/SHOULD ensure that users can enter a value for this element during data input","definition":"Notes: Exactly what form the input takes is not specified, but the expectation is that this is a value that comes from the user, and not implied internally by the application","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"may-populate","display":"A Conformant Application MAY choose not to populate this element","definition":"Notes: this is the converse of will-send, and is really a null-statement - it's the default rule for an application. It's defined here to allow a specification to be explicit that it isn't conveying obligations for resource producers"},{"code":"must-explain","display":"Documentation applicable to Conformant Applications SHALL/SHOULD explain how this element is handled","definition":"Notes: this is really a rule about specifications, implying that another specification (which might be application documentation) either makes this element will-send, or explains how the use cases that involve this element do not arise, or how they are handled. An example: IPA marks Patient.active must-handle and must-explain. Client applications must process Patient.active correctly if they see it, but many (though *not all*) specifications and/or applications ensure that Patient.active will never be false, and so it will never be populated e.g. MedMij in Netherlands prohibits use of Patient.active, and explains that it is never false.","property":[{"code":"should-shall","valueBoolean":true}]}]},{"code":"ExchangerObligations","display":"ExchangerObligations","definition":"Exchangers do not produce or consume resources; they only pass the resource on. They may store the resource in a persistent store between reception and subsequent transfer. The generic FHIR servers are exchangers, as are most middleware systems.","concept":[{"code":"preserve","display":"Conformant Applications SHALL/SHOULD ensure that this element does not changed between receiving and transfer","definition":"Notes: This does not mean that the element value cannot change, only that changing the element value for an element marked with this obligation moves an application from being an exchanger to a Consumer and a Producer, and those obligations apply","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"may-alter","display":"Conformant Applications MAY choose not to alter this element value","definition":"Notes: this is the converse of preserve, and is really a null-statement - it's the default rule for an application. It's defined here to allow a specification to be explicit that it isn't conveying obligations for resource producers"}]},{"code":"ResourceConsumerObligations","display":"ResourceConsumerObligations","definition":"Resource Consumers are applications that consume resources and do something with them, either displaying them to humans, transferring them to some other format for further re-use, or using them to drive some kind of application logic process AKA decision support. Resource Consumers often store resources, but do not need to, and whether resources are stored or not between receiving them and using them doesn't make any difference to the obligations","concept":[{"code":"no-error","display":"Conformant Applications SHALL/SHOULD accept resources containing any valid value for the element without error","definition":"Notes: Applications are still able to inform the user that a value cannot be processed correctly, but applications aren't able to reject the information out of hand or ignore the element value in order to process the resource correctly (which would be allowed for elements that do not have this obligation). This obligation also applies to elements that only contain a DataAbsentReason or a NullFlavor, should either of these be allowed on the consumer obligations","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"must-handle","display":"Conformant Applications SHALL/SHOULD handle the meaning of this element correctly","definition":"Notes: this rule is vague in that doesn't specify any particular handling of the element. But it's important because an application that ignores this element is non-conformant. A good example would be a status code of 'entered-in-error' - how exactly a Resource Consumer handles this depends on the use case etc, but the application can never simply ignore such a status code. Note that whether the resource or information from it is stored for later use is irrelevant - when the resource or information in it is processed, the consequences of the element are considered. That may mean not retaining the information for later use, or informing the user, etc. Typically, this obligation marks that there are known patient safety issues that can arise if the element is ignored. Implementers should pay particular attention to the possible range of values for the element from a safety perspective.","property":[{"code":"should-shall","valueBoolean":true}],"concept":[{"code":"must-display","display":"Conformant Applications SHALL/SHOULD display the value of this element when presenting the resource to a human user","definition":"Notes: exactly how it is displayed is not specified, but it means that a human looking at the content of the resource is made aware of the value of the element so that they can consider the meaning of the resource","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"must-share","display":"Conformant Applications SHALL/SHOULD retain the value of this element when the information from the resource is shared with other applications","definition":"Notes: this rule applies whether the information is being shared in the form of a FHIR resource, or in some other format. The rule applies whether or not the resource is stored prior to sharing.","property":[{"code":"should-shall","valueBoolean":true}]},{"code":"must-process","display":"Conformant Applications SHALL/SHOULD consider the value of this element when processing the resource as specified by the IG","definition":"Notes: this implies that the IG that specifies this obligation provides details about what processing is to be performed, and the obligation specifially relates to the processing specified in the IG DataAbsentReason or NullFlavor when handling the resource or the information in it as specified by the other obligations.","property":[{"code":"should-shall","valueBoolean":true}]}]},{"code":"can-ignore","display":"A Conformant Application MAY ignore this element","definition":"Notes: this is the converse of must-handle, and is really a null-statement - it's the default rue for an application. It's defined here to allow a specification to be explicit that it isn't converying obligations for resource consumers"}]},{"code":"AggregateConcepts","display":"AggregateConcepts","definition":"Predefined common combinations","concept":[{"code":"v2-re","display":"V2 RE","definition":"RE as defined in chapter 2 of the v2 specification","property":[{"code":"expression","valueString":"can-send/SHALL+use-dar-nf/SHALL+must-handle/SHALL+must-display/SHALL+must-share/SHOULD+no-error/SHALL+assume-unknown/SHALL"}]},{"code":"ihe-r2","display":"IHE R2","definition":"R2 as defined in IHE Appendix Z","property":[{"code":"expression","valueString":"will-send/SHALL+can-ignore+no-error/SHALL"}]},{"code":"std","display":"Standard Obligations","definition":"The standard recommended set of obligations for IGs to use unless they know they want something different. Note that the standard codes don't include use-dar, use-dar-nf, use-dar-if-allowed / use-reason - that gets put on specific elements that justify this handling","property":[{"code":"expression","valueString":"will-send/SHALL+will-present/SHALL+no-error/SHALL+must-handle/SHOULD"}]}]}]}